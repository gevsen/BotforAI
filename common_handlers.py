# handlers/common_handlers.py
import asyncio
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone, timedelta

import keyboards as kb
from database import Database
import config
from .user_handlers import get_user_level

common_router = Router()
db = Database(config.DATABASE_PATH)

async def notify_admins_new_user(bot: Bot, user: types.User):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    user_link = f'<a href="tg://user?id={user.id}">{user.full_name}</a>'
    text = (f"üéâ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
            f"ID: <code>{user.id}</code>\n"
            f"Username: @{user.username if user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    for admin_id in config.ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass

@common_router.message(Command('start'), StateFilter("*"), F.chat.type == 'private')
@common_router.callback_query(F.data == 'back_main', StateFilter("*"))
async def universal_start_handler(event: types.Message | types.CallbackQuery, state: FSMContext, bot: Bot, model_status_cache: dict):
    if await state.get_state() is not None:
        await state.clear()
        message_source = event.message if isinstance(event, types.CallbackQuery) else event
        await message_source.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    user = event.from_user
    is_new_user = await db.add_user(user.id, user.username)

    if is_new_user and user.id not in config.ADMIN_IDS:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ó–ê–ü–£–°–ö –í –§–û–ù–û–í–û–ú –†–ï–ñ–ò–ú–ï >>>
        asyncio.create_task(notify_admins_new_user(bot, user))
    
    welcome_text = f'–ü—Ä–∏–≤–µ—Ç, —è Arima.AI\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(timezone(timedelta(hours=3))).strftime("%H:%M –ú–°–ö")}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    reply_markup = kb.get_main_menu(user.id, model_status_cache)

    if isinstance(event, types.CallbackQuery):
        try:
            await event.message.edit_text(welcome_text, reply_markup=reply_markup)
        except:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
            await event.message.answer(welcome_text, reply_markup=reply_markup)
    else:
        await event.answer(welcome_text, reply_markup=reply_markup)
    
    if isinstance(event, types.CallbackQuery):
        await event.answer()

@common_router.callback_query(F.data == 'cancel_action', StateFilter("*"))
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot, model_status_cache: dict):
    current_state = await state.get_state()
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
    
    # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if current_state and current_state.startswith("AdminActions"):
        await callback.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.get_admin_menu())
    else:
        await universal_start_handler(callback, state, bot, model_status_cache)