# handlers/admin_handlers.py
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Router, types, F, Bot, BaseMiddleware
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from openai import OpenAI, APIError, APIConnectionError

import config
import keyboards as kb
from database import Database
from states import AdminActions

admin_router = Router()
db = Database(config.DATABASE_PATH)

class AdminMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.TelegramObject, data: dict):
        if hasattr(event, 'from_user') and event.from_user.id in config.ADMIN_IDS:
            return await handler(event, data)
        if isinstance(event, types.CallbackQuery):
            await event.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

admin_router.message.middleware(AdminMiddleware())
admin_router.callback_query.middleware(AdminMiddleware())

async def get_user_id_from_input(input_str: str):
    if input_str.startswith('@'):
        user = await db.get_user_id_by_username(input_str[1:])
        return user[0] if user else None
    try:
        return int(input_str)
    except ValueError:
        return None

async def test_chat_model(model: str) -> dict:
    async with aiohttp.ClientSession() as session:
        headers = {'Authorization': f'Bearer {config.API_KEY}', 'Content-Type': 'application/json'}
        data = {'model': model, 'messages': [{'role': 'user', 'content': 'Test'}], 'temperature': 0.7, 'max_tokens': 10}
        try:
            async with session.post(f'{config.API_URL}/chat/completions', headers=headers, json=data, timeout=45) as response:
                if response.status == 200:
                    try: await response.json(); return {'model': model, 'status': 'OK'}
                    except Exception: return {'model': model, 'status': 'Invalid JSON'}
                else: return {'model': model, 'status': f'Error {response.status}'}
        except asyncio.TimeoutError: return {'model': model, 'status': 'Timeout'}
        except Exception as e: return {'model': model, 'status': f'Error: {type(e).__name__}'}

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨: –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö EXCEPT –ë–õ–û–ö–û–í >>>
async def test_image_model() -> dict:
    client = OpenAI(base_url=config.IMAGE_API_URL, api_key=config.API_KEY)
    try:
        client.images.generate(model=config.IMAGE_MODEL, prompt="Test", size="1024x1024", n=1)
        return {'model': config.IMAGE_MODEL, 'status': 'OK'}
    except APIConnectionError:
        # –°–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—É –Ω–µ–µ –Ω–µ—Ç status_code)
        return {'model': config.IMAGE_MODEL, 'status': 'Connection Error'}
    except APIError as e:
        # –ó–∞—Ç–µ–º –ª–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API (—É –Ω–∏—Ö –µ—Å—Ç—å status_code)
        return {'model': config.IMAGE_MODEL, 'status': f'API Error {e.status_code}'}
    except Exception as e:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        return {'model': config.IMAGE_MODEL, 'status': f'Error: {type(e).__name__}'}

@admin_router.callback_query(F.data == 'menu_admin')
async def menu_admin(callback: types.CallbackQuery):
    await callback.message.edit_text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=kb.get_admin_menu())

@admin_router.callback_query(F.data == 'admin_back')
async def admin_back(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=kb.get_admin_menu())

@admin_router.callback_query(F.data == 'admin_stats')
async def admin_stats(callback: types.CallbackQuery):
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await db.cleanup_expired_subscriptions()
    
    total_users = await db.get_user_count()
    sub_stats_raw = await db.get_subscription_stats()
    reg_stats = await db.get_registration_counts()

    sub_stats = {config.SUB_LEVEL_MAP.get(k, 'unknown'): v for k, v in sub_stats_raw.items()}

    text = (f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n'
            f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n'
            f'Free: {sub_stats.get("free", 0)}\n'
            f'Standard: {sub_stats.get("standard", 0)}\n'
            f'Premium: {sub_stats.get("premium", 0)}\n\n'
            f'<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:</b>\n'
            f'–°–µ–≥–æ–¥–Ω—è: {reg_stats["today"]}\n'
            f'–í—á–µ—Ä–∞: {reg_stats["yesterday"]}\n'
            f'–ó–∞ 7 –¥–Ω–µ–π: {reg_stats["last_7_days"]}\n'
            f'–ó–∞ 30 –¥–Ω–µ–π: {reg_stats["last_30_days"]}')
    
    await callback.message.edit_text(text, reply_markup=kb.get_admin_back_menu())

@admin_router.callback_query(F.data == 'admin_test')
async def admin_test_models(callback: types.CallbackQuery, model_status_cache: dict):
    await callback.answer("–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    msg = await callback.message.edit_text('–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.')
    
    chat_models = sorted(list(set(model for models in config.ALL_MODELS.values() for model in models)))
    tasks = [test_chat_model(model) for model in chat_models]
    tasks.append(test_image_model())
    
    results = await asyncio.gather(*tasks)
    
    working_models = []
    failed_models = []
    model_status_cache.clear()

    for r in results:
        is_ok = r['status'] == 'OK'
        model_status_cache[r['model']] = is_ok
        if is_ok:
            working_models.append(r)
        else:
            failed_models.append(r)

    text = f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n<b>‚úÖ –†–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ ({len(working_models)}):</b>\n' + "\n".join(f"‚úì {r['model']}" for r in working_models)
    if failed_models:
        text += f'\n\n<b>‚ùå –ù–µ—Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ ({len(failed_models)}):</b>\n' + "\n".join(f"‚úó {r['model']} - {r['status']}" for r in failed_models)
    
    await msg.edit_text(text, reply_markup=kb.get_admin_back_menu())

@admin_router.callback_query(F.data == 'admin_users')
async def admin_users_menu_callback(callback: types.CallbackQuery):
    await callback.message.edit_text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=kb.get_admin_users_menu())

async def start_admin_action(callback: types.CallbackQuery, state: FSMContext, new_state: AdminActions, prompt_text: str):
    await callback.message.edit_text(prompt_text, reply_markup=kb.get_cancel_keyboard())
    await state.set_state(new_state)
    await state.update_data(prompt_message_id=callback.message.message_id)
    await callback.answer()

async def process_admin_action(message: types.Message, state: FSMContext, bot: Bot, action_func):
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    await state.clear()

    success, result_text = await action_func(message.text)
    
    if prompt_message_id:
        await bot.edit_message_text(result_text, chat_id=message.chat.id, message_id=prompt_message_id)
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.get_admin_menu())
    await message.delete()

def format_user_card(user_data, page, total_pages):
    (uid, uname, sub_level, sub_end, is_blocked, last_model, sys_prompt, temp, created_at) = user_data
    sub_name = config.SUB_LEVEL_MAP.get(sub_level, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    
    sub_end_text = "–ù–∏–∫–æ–≥–¥–∞"
    if sub_end:
        sub_end_date = datetime.fromisoformat(sub_end)
        sub_end_text = sub_end_date.strftime('%d.%m.%Y %H:%M') + (" (–∏—Å—Ç–µ–∫–ª–∞)" if sub_end_date < datetime.now() else "")
    
    created_at_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if created_at and isinstance(created_at, str):
        created_at_text = datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')
    
    text = (f"<b>‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {page}/{total_pages}</b>\n\n"
            f"<b>ID:</b> <code>{uid}</code>\n<b>Username:</b> @{uname or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {sub_name.capitalize()} ({sub_level})\n<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {sub_end_text}\n"
            f"<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> {'–î–∞' if is_blocked else '–ù–µ—Ç'}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å:</b> {last_model or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}\n<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {created_at_text}")
    return text

@admin_router.callback_query(kb.Paginator.filter())
@admin_router.callback_query(F.data.startswith("admin_list_users"))
async def admin_list_users(callback: types.CallbackQuery, callback_data: kb.Paginator = None):
    page = 1
    if callback_data and isinstance(callback_data, kb.Paginator):
        if callback_data.action == "next": page = callback_data.page + 1
        elif callback_data.action == "prev": page = callback_data.page - 1
    
    total_users = await db.get_user_count()
    if total_users == 0:
        return await callback.message.edit_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=kb.get_admin_back_menu())

    user_data_list = await db.get_all_users_paginated(page=page)
    if not user_data_list:
        return await callback.answer("–ë–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", show_alert=True)

    text = format_user_card(user_data_list[0], page, total_users)
    await callback.message.edit_text(text, reply_markup=kb.get_paginated_users_keyboard(page, total_users))

@admin_router.callback_query(F.data == 'admin_search')
async def admin_search_start(callback: types.CallbackQuery, state: FSMContext):
    await start_admin_action(callback, state, AdminActions.waiting_for_search_user, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞.")

@admin_router.message(AdminActions.waiting_for_search_user)
async def admin_search_process(message: types.Message, state: FSMContext, bot: Bot):
    async def action(input_str):
        user_id = await get_user_id_from_input(input_str)
        if not user_id: return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{input_str}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        user_data = await db.get_user_info(user_id)
        if not user_data: return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
        
        text = format_user_card(user_data, 1, 1).replace(" 1/1", "")
        return True, text
    
    await process_admin_action(message, state, bot, action)

@admin_router.callback_query(F.data == 'admin_grant')
async def admin_grant_start(callback: types.CallbackQuery, state: FSMContext):
    await start_admin_action(callback, state, AdminActions.waiting_for_grant_user, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID/@username –∏ —É—Ä–æ–≤–µ–Ω—å (0, 1, 2):\n–§–æ—Ä–º–∞—Ç: `ID/username LEVEL`')

@admin_router.message(AdminActions.waiting_for_grant_user)
async def admin_grant_process(message: types.Message, state: FSMContext, bot: Bot):
    async def action(input_str):
        try:
            target_input, level_str = input_str.split()
            level = int(level_str)
            if level not in config.SUB_LEVEL_MAP.keys(): 
                return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏. –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —á–∏—Å–µ–ª: {list(config.SUB_LEVEL_MAP.keys())}."
            
            target_user_id = await get_user_id_from_input(target_input)
            if not target_user_id: 
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_input} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            await db.update_subscription(target_user_id, level)
            sub_name = config.SUB_LEVEL_MAP.get(level).capitalize()

            try:
                if level > 0:
                    notification_text = f"–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: <b>{sub_name}</b>."
                    await bot.send_message(target_user_id, notification_text)
            except (TelegramForbiddenError, TelegramBadRequest):
                pass 

            return True, f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {sub_name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_input}."
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `@username 1` –∏–ª–∏ `12345678 2`."
    
    await process_admin_action(message, state, bot, action)

@admin_router.callback_query(F.data == 'admin_revoke')
async def admin_revoke_start(callback: types.CallbackQuery, state: FSMContext):
    await start_admin_action(callback, state, AdminActions.waiting_for_revoke_user, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Free):')

@admin_router.message(AdminActions.waiting_for_revoke_user)
async def admin_revoke_process(message: types.Message, state: FSMContext, bot: Bot):
    async def action(input_str):
        target_user_id = await get_user_id_from_input(input_str)
        if not target_user_id:
            return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {input_str} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        if target_user_id in config.ADMIN_IDS:
            return False, "–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

        await db.update_subscription(target_user_id, 0)
        
        try:
            await bot.send_message(target_user_id, '–í–∞—à–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å Free.')
        except (TelegramForbiddenError, TelegramBadRequest):
            pass
            
        return True, f"–ü–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {input_str} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ Free."
    
    await process_admin_action(message, state, bot, action)

async def blocking_action(input_str: str, block: bool, bot: Bot):
    target_user_id = await get_user_id_from_input(input_str)
    if not target_user_id: return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {input_str} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await db.block_user(target_user_id, block)
    status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if block else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    try:
        await bot.send_message(target_user_id, f'–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º –±—ã–ª {status} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    except (TelegramForbiddenError, TelegramBadRequest): pass
    return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {input_str} {status}."

@admin_router.callback_query(F.data == 'admin_block')
async def admin_block_start(callback: types.CallbackQuery, state: FSMContext):
    await start_admin_action(callback, state, AdminActions.waiting_for_block_user, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:')

@admin_router.message(AdminActions.waiting_for_block_user)
async def admin_block_process(message: types.Message, state: FSMContext, bot: Bot):
    await process_admin_action(message, state, bot, lambda text: blocking_action(text, True, bot))

@admin_router.callback_query(F.data == 'admin_unblock')
async def admin_unblock_start(callback: types.CallbackQuery, state: FSMContext):
    await start_admin_action(callback, state, AdminActions.waiting_for_unblock_user, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:')

@admin_router.message(AdminActions.waiting_for_unblock_user)
async def admin_unblock_process(message: types.Message, state: FSMContext, bot: Bot):
    await process_admin_action(message, state, bot, lambda text: blocking_action(text, False, bot))

async def broadcast_to_users(bot: Bot, text: str, pin_message: bool, initiator_id: int):
    broadcast_id = await db.add_broadcast(text)
    user_ids = await db.get_all_user_ids()
    success_count, fail_count = 0, 0
    for user_id in user_ids:
        try:
            sent_message = await bot.send_message(user_id, text)
            await db.add_sent_broadcast_message(broadcast_id, user_id, sent_message.message_id)
            if pin_message: await bot.pin_chat_message(chat_id=user_id, message_id=sent_message.message_id)
            success_count += 1
        except (TelegramForbiddenError, TelegramBadRequest): fail_count += 1
        except Exception: fail_count += 1
        await asyncio.sleep(0.1)
    
    await bot.send_message(
        chat_id=initiator_id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
        reply_markup=kb.get_broadcast_manage_keyboard(broadcast_id)
    )

@admin_router.callback_query(F.data == 'admin_broadcast')
async def admin_broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    await start_admin_action(callback, state, AdminActions.waiting_for_broadcast_message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

@admin_router.message(AdminActions.waiting_for_broadcast_message)
async def admin_broadcast_confirm(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    
    await state.update_data(broadcast_text=message.text)
    await state.set_state(AdminActions.waiting_for_broadcast_confirmation)
    
    if prompt_message_id:
        await bot.edit_message_text(
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            chat_id=message.chat.id, 
            message_id=prompt_message_id, 
            reply_markup=kb.get_broadcast_confirmation_keyboard()
        )
    await message.delete()

@admin_router.callback_query(F.data.startswith('broadcast_'), AdminActions.waiting_for_broadcast_confirmation)
async def admin_broadcast_process(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    text = user_data.get('broadcast_text')
    pin = callback.data == 'broadcast_pin'
    await state.clear()
    await callback.message.edit_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
    initiator_id = callback.from_user.id
    
    asyncio.create_task(broadcast_to_users(bot, text, pin_message=pin, initiator_id=initiator_id))
    
    await callback.answer()

@admin_router.callback_query(kb.BroadcastCallback.filter())
async def manage_broadcast(callback: types.CallbackQuery, callback_data: kb.BroadcastCallback, bot: Bot):
    action = callback_data.action
    broadcast_id = callback_data.broadcast_id
    
    sent_messages = await db.get_sent_messages_for_broadcast(broadcast_id)
    if not sent_messages:
        return await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

    action_text = "–û—Ç–∫—Ä–µ–ø–ª—è—é" if action == "unpin" else "–£–¥–∞–ª—è—é"
    await callback.answer(f"{action_text} —Å–æ–æ–±—â–µ–Ω–∏—è...")

    count = 0
    for user_id, message_id in sent_messages:
        try:
            if action == "unpin":
                await bot.unpin_all_chat_messages(user_id)
            elif action == "delete":
                await bot.delete_message(user_id, message_id)
            count += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            pass
    
    if action == "delete":
        await db.delete_broadcast(broadcast_id)
        await callback.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await callback.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∞ —É {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@admin_router.callback_query(F.data == 'admin_reset_all_subs')
async def admin_reset_all_subs_confirm(callback: types.CallbackQuery):
    text = ("<b>‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å <b>–í–°–ï</b> –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ —É—Ä–æ–≤–Ω—è Free?\n\n"
            "–ü–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã –Ω–µ –±—É–¥—É—Ç. "
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")
    await callback.message.edit_text(text, reply_markup=kb.get_reset_all_subs_confirmation_keyboard())

@admin_router.callback_query(F.data == 'confirm_reset_all_subs')
async def admin_reset_all_subs_process(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–ø–æ–ª–Ω—è—é —Å–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    updated_count = await db.reset_all_subscriptions(config.ADMIN_IDS)
    
    await callback.message.edit_text(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ {updated_count} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ —É—Ä–æ–≤–Ω—è Free.",
        reply_markup=kb.get_admin_back_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data == 'admin_self_test')
async def admin_self_test(callback: types.CallbackQuery, bot: Bot):
    await callback.answer("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã...")
    msg = await callback.message.edit_text("<b>ü§ñ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤...</b>")

    report = ["<b>ü§ñ –û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º:</b>"]
    admin_id = callback.from_user.id

    try:
        await db.update_subscription(admin_id, 1)
        level = await db.check_subscription(admin_id)
        report.append("‚úÖ –¢–µ—Å—Ç 1 (–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏): OK" if level == 1 else "‚ùå –¢–µ—Å—Ç 1 (–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏): FAILED")

        await db.block_user(admin_id, True)
        is_blocked = await db.is_user_blocked(admin_id)
        report.append("‚úÖ –¢–µ—Å—Ç 2 (–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞): OK" if is_blocked else "‚ùå –¢–µ—Å—Ç 2 (–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞): FAILED")

        await db.block_user(admin_id, False)
        is_blocked = await db.is_user_blocked(admin_id)
        report.append("‚úÖ –¢–µ—Å—Ç 3 (–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞): OK" if not is_blocked else "‚ùå –¢–µ—Å—Ç 3 (–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞): FAILED")

        await db.update_subscription(admin_id, 0)
        level = await db.check_subscription(admin_id)
        report.append("‚úÖ –¢–µ—Å—Ç 4 (–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏): OK" if level == 0 else "‚ùå –¢–µ—Å—Ç 4 (–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏): FAILED")
        
        report.append("\n<b>–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>")
    except Exception as e:
        report.append(f"\n‚ùå <b>–í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n<code>{e}</code>")
    
    await msg.edit_text("\n".join(report), reply_markup=kb.get_admin_back_menu())