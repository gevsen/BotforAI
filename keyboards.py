# keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
import config

class ModelCallback(CallbackData, prefix="model"):
    model_name: str

class Paginator(CallbackData, prefix="pag"):
    action: str
    page: int

class BroadcastCallback(CallbackData, prefix="brd"):
    action: str
    broadcast_id: int

class SubDetailCallback(CallbackData, prefix="show_sub"):
    level: int

def get_main_menu(user_id: int, model_status_cache: dict) -> InlineKeyboardMarkup:
    is_image_model_disabled = config.IMAGE_MODEL in model_status_cache and not model_status_cache[config.IMAGE_MODEL]
    image_gen_text = "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" if is_image_model_disabled else "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    
    buttons = [
        [InlineKeyboardButton(text='üí¨ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å', callback_data='menu_models')],
        [InlineKeyboardButton(text=image_gen_text, callback_data='menu_image_gen')],
        [InlineKeyboardButton(text='‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞', callback_data='menu_subscription')],
        [InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='menu_settings')],
        [InlineKeyboardButton(text='üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{config.SUPPORT_USERNAME}')],
        [InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='menu_help')]
    ]
    if user_id in config.ADMIN_IDS:
        buttons.insert(5, [InlineKeyboardButton(text='üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='menu_admin')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')],
        [InlineKeyboardButton(text='üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='admin_users')],
        [InlineKeyboardButton(text='üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='admin_broadcast')],
        [InlineKeyboardButton(text='üß™ –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π', callback_data='admin_test')],
        [InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã', callback_data='admin_self_test')],
        [InlineKeyboardButton(text='üî• –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data='admin_reset_all_subs')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_main')]
    ])

def get_admin_users_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_list_users_1')],
        [InlineKeyboardButton(text='üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='admin_search')],
        [InlineKeyboardButton(text='‚úÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='admin_grant')],
        [InlineKeyboardButton(text='üíî –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='admin_revoke')],
        [InlineKeyboardButton(text='üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞', callback_data='admin_block')],
        [InlineKeyboardButton(text='üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞', callback_data='admin_unblock')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='admin_back')]
    ])

def get_paginated_users_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=Paginator(action="prev", page=page).pack()))
    nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=Paginator(action="next", page=page).pack()))
    
    buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_user_settings_menu(settings: dict) -> InlineKeyboardMarkup:
    temp_btn_text = f"üå°Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É ({settings.get('temp', 'N/A')})"
    buttons = [
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data="settings_prompt")],
        [InlineKeyboardButton(text=temp_btn_text, callback_data="settings_temp")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_broadcast_manage_keyboard(broadcast_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üìå –û—Ç–∫—Ä–µ–ø–∏—Ç—å —É –≤—Å–µ—Ö", callback_data=BroadcastCallback(action="unpin", broadcast_id=broadcast_id).pack()),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö", callback_data=BroadcastCallback(action="delete", broadcast_id=broadcast_id).pack())
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_category_models_menu(category: str, user_sub_level: int, disabled_models: set) -> InlineKeyboardMarkup:
    sub_name = config.SUB_LEVEL_MAP.get(user_sub_level, 'free')
    sub_info = config.SUBSCRIPTION_MODELS[sub_name]
    
    available_for_sub = sub_info['models']
    category_models = config.ALL_MODELS.get(category, [])
    
    buttons = []
    for model in category_models:
        if model in available_for_sub:
            text = f"‚ö†Ô∏è {model}" if model in disabled_models else model
            buttons.append([InlineKeyboardButton(text=text, callback_data=ModelCallback(model_name=model).pack())])
            
    buttons.append([InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu_models')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_chat_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å', callback_data='menu_models')],
        [InlineKeyboardButton(text='üóëÔ∏è –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥', callback_data='chat_new')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main')]
    ])

def get_models_categories_menu(user_sub_level: int) -> InlineKeyboardMarkup:
    sub_name = config.SUB_LEVEL_MAP.get(user_sub_level, 'free')
    sub_info = config.SUBSCRIPTION_MODELS[sub_name]
    available_for_sub = sub_info['models']

    buttons = []
    for provider, models in config.ALL_MODELS.items():
        if any(model in available_for_sub for model in models):
            buttons.append([InlineKeyboardButton(text=provider, callback_data=f'cat_{provider}')])

    buttons.append([InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_main')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subscription_menu() -> InlineKeyboardMarkup:
    buttons = []
    for sub_name, sub_info in config.SUBSCRIPTION_MODELS.items():
        if sub_info['price'] > 0:
            buttons.append([
                InlineKeyboardButton(
                    text=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ {sub_info['name']} - {sub_info['price']}‚ÇΩ",
                    callback_data=SubDetailCallback(level=sub_info['level']).pack()
                )
            ])
    buttons.append([InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_main')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subscription_details_keyboard(level: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    sub_name = config.SUB_LEVEL_MAP.get(level)
    sub_info = config.SUBSCRIPTION_MODELS[sub_name]
    
    buttons = [
        [InlineKeyboardButton(
            text=f"‚úÖ –ö—É–ø–∏—Ç—å {sub_info['name']} - {sub_info['price']}‚ÇΩ",
            callback_data=f"buy_{level}"
        )],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º', callback_data='menu_subscription')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_main')]])

def get_admin_back_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='admin_back')]])

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')]])

def get_broadcast_confirmation_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º', callback_data='broadcast_send')],
        [InlineKeyboardButton(text='üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å', callback_data='broadcast_pin')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')]
    ])

def get_reset_all_subs_confirmation_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ', callback_data='confirm_reset_all_subs')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='admin_back')]
    ])