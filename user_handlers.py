# handlers/user_handlers.py
import asyncio
import aiohttp
import time
from datetime import datetime
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from openai import OpenAI

import config
import keyboards as kb
from database import Database
from keyboards import SubDetailCallback
from states import ImageGeneration, UserSettings, Chatting
from utils import send_long_message
from .utils import get_user_level, get_user_limit, prepare_api_payload, execute_chat_request

user_router = Router()

user_router.message.filter(F.chat.type == 'private')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---

@user_router.callback_query(F.data == 'menu_image_gen')
async def image_gen_start(callback: types.CallbackQuery, state: FSMContext, model_status_cache: dict, user_level: int):
    if config.IMAGE_MODEL in model_status_cache and not model_status_cache[config.IMAGE_MODEL]:
        await callback.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return

    if user_level == 0:
        await callback.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.", show_alert=True)
        return

    await state.set_state(ImageGeneration.waiting_for_prompt)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–ø—Ä–æ–º–ø—Ç) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        reply_markup=kb.get_cancel_keyboard()
    )
    await callback.answer()

@user_router.message(ImageGeneration.waiting_for_prompt, F.text)
async def process_image_prompt(message: types.Message, state: FSMContext, bot: Bot, db: Database):
    await state.clear()
    prompt = message.text
    msg = await message.answer("üé® –°–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")

    client = OpenAI(base_url=config.IMAGE_API_URL, api_key=config.API_KEY)
    try:
        response = client.images.generate(
            model=config.IMAGE_MODEL, prompt=prompt, size="1024x1024", quality="standard", n=1
        )
        image_url = response.data[0].url
        await bot.send_photo(chat_id=message.chat.id, photo=image_url, caption=f"‚úÖ –í–∞—à —à–µ–¥–µ–≤—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{prompt}`")
        await msg.delete()
        if message.from_user.id not in config.ADMIN_IDS:
            await db.add_request(message.from_user.id, config.IMAGE_MODEL)
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}" if message.from_user.id in config.ADMIN_IDS else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        await msg.edit_text(error_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ —á–∞—Ç–∞ ---

@user_router.callback_query(F.data == 'menu_models')
async def models_categories_menu(callback: types.CallbackQuery, state: FSMContext, user_level: int):
    await state.clear()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb.get_models_categories_menu(user_level))

@user_router.callback_query(F.data.startswith('cat_'))
async def category_models_menu(callback: types.CallbackQuery, model_status_cache: dict, user_level: int):
    category = callback.data.split('_', 1)[1]
    disabled_models = {model for model, status in model_status_cache.items() if not status}
    await callback.message.edit_text(f'–ú–æ–¥–µ–ª–∏ {category}:', reply_markup=kb.get_category_models_menu(category, user_level, disabled_models))

@user_router.callback_query(kb.ModelCallback.filter())
async def select_model(callback: types.CallbackQuery, callback_data: kb.ModelCallback, state: FSMContext, model_status_cache: dict, db: Database):
    model = callback_data.model_name
    if model in model_status_cache and not model_status_cache[model]:
        await callback.answer("‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return
            
    await state.set_state(Chatting.in_chat)
    await state.update_data(model=model, chat_history=[])
    await db.update_last_selected_model(callback.from_user.id, model)
    
    await callback.message.answer(f'<b>–ú–æ–¥–µ–ª—å: {model}</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new.')
    await callback.answer()

@user_router.message(Command('new'), StateFilter(Chatting.in_chat))
async def new_chat_handler(message: types.Message, state: FSMContext):
    await state.update_data(chat_history=[])
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")

@user_router.callback_query(F.data == 'chat_new', StateFilter(Chatting.in_chat))
async def new_chat_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(chat_history=[])
    await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω.")
    await callback.message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")

@user_router.message(F.text, StateFilter(Chatting.in_chat))
async def handle_chat(message: types.Message, state: FSMContext, bot: Bot, db: Database):
    user_id = message.from_user.id
    msg = await message.answer('üß† –î—É–º–∞—é...')
    start_time = time.monotonic()

    user_data = await state.get_data()
    model = user_data.get('model')
    payload = await prepare_api_payload(db, user_id, message.text, model, state)
    
    async with aiohttp.ClientSession() as session:
        answer_text, api_error = await execute_chat_request(session, payload)
    
    await msg.delete()

    if answer_text:
        end_time = time.monotonic()
        duration = round(end_time - start_time, 2)
        
        final_text = f"{answer_text}\n\n<b>–ú–æ–¥–µ–ª—å: {payload['model']} | –í—Ä–µ–º—è: {duration} —Å–µ–∫.</b>"
        
        await send_long_message(bot, user_id, final_text, reply_markup=kb.get_chat_menu())

        if user_id not in config.ADMIN_IDS:
            await db.add_request(user_id, payload['model'])
        
        new_history = payload['messages']
        new_history.append({'role': 'assistant', 'content': answer_text})
        await state.update_data(chat_history=new_history[-config.CHAT_HISTORY_MAX_LEN:])
    else:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {api_error}" if user_id in config.ADMIN_IDS else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        await message.answer(error_text, reply_markup=kb.get_chat_menu())

@user_router.message(F.text, StateFilter(None))
async def handle_text_outside_chat(message: types.Message):
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

@user_router.callback_query(F.data == 'menu_settings')
async def menu_settings(callback: types.CallbackQuery, db: Database):
    settings = await db.get_user_settings(callback.from_user.id)
    prompt, temp = settings if settings else (None, None)
    
    prompt_text = prompt or config.DEFAULT_SYSTEM_PROMPT
    temp_val = temp or config.DEFAULT_TEMPERATURE

    text = (
        "<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"<b>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp_val}\n\n"
        f"<b>üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n"
        f"<i>{prompt_text}</i>"
    )
    await callback.message.edit_text(text, reply_markup=kb.get_user_settings_menu({'temp': temp_val}))

@user_router.callback_query(F.data == "settings_prompt")
async def settings_prompt_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserSettings.waiting_for_prompt)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è AI).", reply_markup=kb.get_cancel_keyboard())

@user_router.message(UserSettings.waiting_for_prompt, F.text)
async def settings_prompt_process(message: types.Message, state: FSMContext, bot: Bot, db: Database, model_status_cache: dict):
    from .common_handlers import universal_start_handler
    await db.update_user_settings(message.from_user.id, prompt=message.text)
    await state.clear()
    await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await universal_start_handler(message, state, bot, model_status_cache)

@user_router.callback_query(F.data == "settings_temp")
async def settings_temp_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserSettings.waiting_for_temperature)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0).", reply_markup=kb.get_cancel_keyboard())

@user_router.message(UserSettings.waiting_for_temperature, F.text)
async def settings_temp_process(message: types.Message, state: FSMContext, bot: Bot, db: Database, model_status_cache: dict):
    from .common_handlers import universal_start_handler
    try:
        temp = float(message.text.replace(',', '.'))
        if not 0.0 <= temp <= 2.0:
            raise ValueError
        await db.update_user_settings(message.from_user.id, temp=temp)
        await state.clear()
        await message.answer(f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}!")
        await universal_start_handler(message, state, bot, model_status_cache)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–º–æ—â–∏ ---

@user_router.callback_query(F.data == 'menu_subscription')
async def subscription_menu(callback: types.CallbackQuery, db: Database, user_level: int):
    user_id = callback.from_user.id
    if user_id in config.ADMIN_IDS:
        await callback.message.edit_text('–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø (Premium) –∫–∞–∫ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=kb.get_back_to_main_menu())
        await callback.answer()
        return

    sub_name = config.SUB_LEVEL_MAP.get(user_level, 'free')
    sub_info = config.SUBSCRIPTION_MODELS[sub_name]
    
    requests_today = await db.get_user_requests_today(user_id)
    limit = await get_user_limit(db, user_id)
    
    sub_end_text = ""
    subscription_end = await db.get_subscription_end(user_id)
    if subscription_end and user_level > 0:
        remaining = subscription_end - datetime.now()
        if remaining.days >= 0:
            sub_end_text = f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {subscription_end.strftime("%d.%m.%Y")}\n'

    text = (
        f"<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:</b> {sub_info['name']}\n"
        f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {requests_today}/{'–ë–µ–∑–ª–∏–º–∏—Ç' if limit == float('inf') else limit}\n"
        f"{sub_end_text}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{sub_info['description']}\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–∫—É–ø–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞–Ω–æ–≤ –Ω–∏–∂–µ:"
    )
    await callback.message.edit_text(text, reply_markup=kb.get_subscription_menu())
    await callback.answer()

@user_router.callback_query(SubDetailCallback.filter())
async def show_subscription_details(callback: types.CallbackQuery, callback_data: SubDetailCallback):
    level = callback_data.level
    sub_name = config.SUB_LEVEL_MAP.get(level)
    if not sub_name:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return
        
    sub_info = config.SUBSCRIPTION_MODELS[sub_name]

    text = (
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∞: {sub_info['name']} ({sub_info['price']}‚ÇΩ)</b>\n\n"
        f"{sub_info['description']}\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>"
    )

    available_models = set(sub_info['models'])
    
    for provider, models_in_provider in config.ALL_MODELS.items():
        included_models = [model for model in models_in_provider if model in available_models]
        if included_models:
            text += f"\n\n<b>{provider}</b>\n"
            text += " ‚Ä¢ " + "\n ‚Ä¢ ".join(included_models)
    
    reply_markup = kb.get_subscription_details_keyboard(level)
    
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await callback.answer()

@user_router.callback_query(F.data == 'menu_help')
async def help_menu(callback: types.CallbackQuery):
    text = (
        '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
        '/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)\n\n'
        '<b>–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n'
    )
    for sub_info in config.SUBSCRIPTION_MODELS.values():
        limit = config.LIMITS[sub_info['level']]
        text += f"<b>{sub_info['name']}:</b> {limit} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å\n"
        
    await callback.message.edit_text(text, reply_markup=kb.get_back_to_main_menu())

@user_router.callback_query(F.data.startswith('buy_'))
async def buy_subscription(callback: types.CallbackQuery):
    level = int(callback.data.split('_')[1])
    sub_name = config.SUB_LEVEL_MAP.get(level, 'free')
    sub_info = config.SUBSCRIPTION_MODELS[sub_name]
    
    text = (
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ <b>{sub_info['name']} ({sub_info['price']}‚ÇΩ)</b> —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{config.PAYMENT_USERNAME}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    
    request_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ—á—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É {sub_info['name']}. –ú–æ–π Telegram ID: {callback.from_user.id}"
    
    await callback.message.edit_text(
        f"{text}\n\n<code>{request_text}</code>",
        reply_markup=kb.get_back_to_main_menu()
    )
    await callback.answer()